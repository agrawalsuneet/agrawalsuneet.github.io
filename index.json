[{"categories":["Blog"],"date":"May 2, 2023","permalink":"https://mahigarg.github.io/blog/vector-in-java/","section":"blog","summary":"Vectors are an important data structure in Java programming that are used to store and manipulate collections of elements. A vector is similar to an array, but with some additional features that make it more flexible and convenient to use. In this blog, we will explore the basics of vectors in Java, how they differ from arrays, and how to use them in your programs.\nWhat is a Vector in Java? In Java, a vector is a dynamic array-like data structure that can be resized as needed. It is part of the java.util package and provides a set of methods for adding, removing, and accessing elements. A vector is similar to an array in that it stores a collection of elements in contiguous memory locations, but it differs from an array in several ways:\nA vector can grow or shrink dynamically, whereas an array has a fixed size. A vector can hold elements of any type, whereas an array can only hold elements of a single type. A vector is synchronized, meaning that it is thread-safe, whereas an array is not. Creating a Vector To create a Vector in Java, we need to import the java.util.Vector package. Then we can create an instance of the Vector class using the following syntax:\nVector\u0026lt;String\u0026gt; vector = new Vector\u0026lt;\u0026gt;(); This creates an empty Vector of Strings. We can also specify an initial capacity for the Vector using the following syntax:\nVector\u0026lt;String\u0026gt; vector = new Vector\u0026lt;\u0026gt;(10); This creates a Vector of Strings with an initial capacity of 10. If we add more elements to the Vector than its capacity, it will automatically resize itself to accommodate the new elements.\nAdding Elements to a Vector We can add elements to a Vector using the add() method. For example, we can add a String to the Vector as follows:\nvector.add(\u0026#34;Hello\u0026#34;); We can also add multiple elements to the Vector using the addAll() method. For example, we can add an array of Strings to the Vector as follows:\nString[] strings = {\u0026#34;World\u0026#34;, \u0026#34;Java\u0026#34;, \u0026#34;Vector\u0026#34;}; vector.addAll(Arrays.asList(strings)); Accessing Elements in a Vector We can access elements in a Vector using the get() method. For example, we can get the first element in the Vector as follows:\nString firstElement = vector.get(0); We can also use a for-each loop to iterate over all the elements in the Vector. For example:\nfor (String element : vector) { System.out.println(element); } Removing Elements from a Vector We can remove elements from a Vector using the remove() method. For example, we can remove the first element in the Vector as follows:\nvector.remove(0); We can also remove all the elements in the Vector using the clear() method. For example:\nvector.\u0026lt;b\u0026gt;clear()\u0026lt;/b\u0026gt;; Other Vector Operations Java\u0026rsquo;s Vector class provides several other useful methods for working with vectors. Here are a few examples:\nsize() - returns the number of elements in the Vector isEmpty() - returns true if the Vector is empty contains() - returns true if the Vector contains a specified element indexOf() - returns the index of the first occurrence of a specified element lastIndexOf() - returns the index of the last occurrence of a specified element Conclusion In summary, a Vector is a dynamic array that can grow or shrink in size as needed. Java provides a built-in Vector class that can be used to implement this data structure. The Vector class provides several useful methods for adding, accessing, and removing elements from the vector. With the Vector class in Java, developers have a powerful tool for manipulating collections of objects.\n","tags":["Java"],"title":"Vector in Java"},{"categories":["Blog"],"date":"May 1, 2023","permalink":"https://mahigarg.github.io/blog/arraylist-in-java/","section":"blog","summary":"ArrayList is one of the most commonly used data structures in Java. It provides a dynamic array implementation that allows you to add and remove elements from the list. The size of the ArrayList can also be dynamically changed based on the number of elements added or removed from the list. In this blog, we will dive into the details of ArrayList in Java, how it works, and some examples of how to use it.\nWhat is an ArrayList in Java? ArrayList is a class in the Java collections framework that provides a dynamic array implementation. It is similar to an array in that it stores a collection of elements, but it has several advantages over traditional arrays:\nArrayList can grow or shrink dynamically, unlike arrays that have a fixed size. ArrayList can store any type of object, whereas arrays are restricted to a specific type. In other words, an ArrayList is a resizable array that can store any type of object.\nFeatures of ArrayList Dynamic Size - The size of an ArrayList can be dynamically increased or decreased based on the elements that are added or removed from it. Ordered Collection - An ArrayList is an ordered collection, meaning that the elements in it are stored in a specific order, and the position of each element is maintained. Supports Heterogeneous Objects - Unlike traditional Java arrays, an ArrayList can store different types of objects in the same collection. Allows Duplicate Elements - An ArrayList allows duplicate elements to be stored in it. Random Access - Elements in an ArrayList can be accessed randomly, i.e., you can directly access any element in the ArrayList by its index number. Implements Serializable and Cloneable Interfaces - An ArrayList implements the Serializable and Cloneable interfaces, which allows it to be easily serialized and cloned. Creating an ArrayList To create an ArrayList in Java, you need to import the java.util.ArrayList package and then create an instance of the ArrayList class using the new keyword. Here\u0026rsquo;s an example:\nimport java.util.ArrayList; public class Main { public static void main(String[] args) { // create an ArrayList of strings ArrayList\u0026amp;lt;String\u0026amp;gt; fruits = \u0026lt;b\u0026gt;new ArrayList\u0026amp;lt;String\u0026amp;gt;()\u0026lt;/b\u0026gt;; // add some elements to the ArrayList fruits.add(\u0026#34;apple\u0026#34;); fruits.add(\u0026#34;banana\u0026#34;); fruits.add(\u0026#34;orange\u0026#34;); // print the elements of the ArrayList System.out.println(fruits); } } In this example, we create an ArrayList of strings called fruits. We then add three elements to the ArrayList using the add method and print the elements using the println method.\nAccessing Elements in an ArrayList You can access elements in an ArrayList using the get() method, which takes an index as its argument and returns the element at that index. Here\u0026rsquo;s an example:\nimport java.util.ArrayList; public class Main { public static void main(String[] args) { // create an ArrayList of strings ArrayList\u0026amp;lt;String\u0026amp;gt; fruits = new ArrayList\u0026amp;lt;String\u0026amp;gt;(); // add some elements to the ArrayList fruits.add(\u0026#34;apple\u0026#34;); fruits.add(\u0026#34;banana\u0026#34;); fruits.add(\u0026#34;orange\u0026#34;); // get the element at index 1 String secondFruit = fruits.\u0026lt;b\u0026gt;get(1)\u0026lt;/b\u0026gt;; // print the element System.out.println(secondFruit); } } In this example, we use the get method to retrieve the element at index 1 (which is banana) and assign it to a variable called secondFruit. We then print the value of secondFruit.\nAdding and Removing Elements in ArrayList You can add and remove elements from an ArrayList using the add() and remove() methods. Here is an example of how to add and remove elements:\nimport java.util.ArrayList; public class ArrayListExample { public static void main(String[] args) { ArrayList\u0026amp;lt;String\u0026amp;gt; list = new ArrayList\u0026amp;lt;String\u0026amp;gt;(); list.add(\u0026#34;Apple\u0026#34;); list.add(\u0026#34;Banana\u0026#34;); list.add(\u0026#34;Orange\u0026#34;); list.\u0026lt;b\u0026gt;add(\u0026#34;Grapes\u0026#34;)\u0026lt;/b\u0026gt;; System.out.println(list); list.\u0026lt;b\u0026gt;remove(2)\u0026lt;/b\u0026gt;; System.out.println(list); } } The above code will add Grapes to the end of the ArrayList and print the updated list. It will then remove the element at index 2 (which is Orange) and print the updated list again.\nModifying Elements in an ArrayList You can modify elements in an ArrayList using the set() method, which takes an index and a new value as its arguments and replaces the element at the specified index with the new value. Here\u0026rsquo;s an example:\nimport java.util.ArrayList; public class Main { public static void main(String[] args) { // create an ArrayList of strings ArrayList\u0026amp;lt;String\u0026amp;gt; fruits = new ArrayList\u0026amp;lt;String\u0026amp;gt;(); // add some elements to the ArrayList fruits.add(\u0026#34;apple\u0026#34;); fruits.add(\u0026#34;banana\u0026#34;); fruits.add(\u0026#34;orange\u0026#34;); // set the element at index 1 to \u0026#34;pear\u0026#34; fruits.\u0026lt;b\u0026gt;set(1, \u0026#34;pear\u0026#34;)\u0026lt;/b\u0026gt;; // print the modified ArrayList System.out.println(fruits); } } In this example, we use the set method to replace the element at index 1 (which is banana) with the value pear. We then print the modified ArrayList.\nArrayList Size The size() method is used to get the number of elements in the ArrayList. Here is an example:\nimport java.util.ArrayList; public class ArrayListExample { public static void main(String[] args) { ArrayList\u0026amp;lt;String\u0026amp;gt; list = new ArrayList\u0026amp;lt;String\u0026amp;gt;(); list.add(\u0026#34;Apple\u0026#34;); list.add(\u0026#34;Banana\u0026#34;); list.add(\u0026#34;Orange\u0026#34;); int size = list.\u0026lt;b\u0026gt;size()\u0026lt;/b\u0026gt;; System.out.println(size); } } The above code will print 3 because there are three elements in the ArrayList.\n","tags":["Java"],"title":"ArrayList in Java"},{"categories":["Design"],"date":"July 20, 2020","permalink":"https://mahigarg.github.io/blog/two-before-arrow/","section":"blog","summary":"So striking at of to welcomed resolved. Northward by described up household therefore attention. Excellence decisively nay man yet impression for contrasted remarkably.\nForfeited you engrossed but gay sometimes explained. Another as studied it to evident. Merry sense given he be arise. Conduct at an replied removal an amongst. Remaining determine few her two cordially admitting old.\nVestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Pellentesque suscipit.\nTiled say decay spoil now walls meant house. My mr interest thoughts screened of outweigh removing. Evening society musical besides inhabit ye my. Lose hill well up will he over on. Increasing link sufficient everything men him admiration unpleasing .\nGreatest properly off ham exercise all. Unsatiable invitation its possession nor off. All difficulty estimating unreserved increasing the solicitude. Unpleasant astonished an diminution up partiality. Noisy an their of meant. Death means up civil do an offer wound of.\ndef print_hi(name) puts \u0026#34;Hi, #{name}\u0026#34; end print_hi(\u0026#39;Ryan\u0026#39;) #=\u0026gt; prints \u0026#39;Hi, Ryan\u0026#39; to STDOUT. ","tags":["Code"],"title":"Two Before Arrow Not Relied"},{"categories":["Documentation"],"date":"July 13, 2020","permalink":"https://mahigarg.github.io/blog/how-to-become-a-creative-designer/","section":"blog","summary":"Introduction Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\n\u0026ldquo;The public is more familiar with bad design than good design. It is, in effect, conditioned to prefer bad design, because that is what it lives with. The new becomes threatening, the old reassuring.\u0026rdquo; \u0026ndash; Benjamin Franklin\nWhy and How Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\nROFL means Rolling on floor laughing. STFU means Shut the freak up. LMK means Let me know. ILY means I love you. YOLO means You only live once. SMH means Shaking my head. When and Where The company was previously known as Hingston + Co. but has been given a complete rebrand — including a new logo, tap badges, website and branded material — by London-based design studio \u0026amp; Smith. The new identity is based on the Kandinsky abstract painting, Black Lines, and true to its name, is mostly black and white with a few flashes of colour. According to \u0026amp; Smith, the identity brings together “art and science” and has been brought to life through collaborations with nine illustrators.\nsanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat.\nConclusion Black Lines wants it to be as easy to serve a Negroni as it is a pint of lager. The drinks company is seeking to revolutionise the bar experience by serving cocktails by draught with a changing menu of drinks (as well as same favourite stand-bys). A pink grapefruit spritz was served through the summer while a new pear and white tea fizz joins the line-up for winter.\n","tags":["Fun"],"title":"How to become designer"},{"categories":["Mobile"],"date":"July 5, 2020","permalink":"https://mahigarg.github.io/blog/design-in-mobile/","section":"blog","summary":"So striking at of to welcomed resolved. Northward by described up household therefore attention. Excellence decisively nay man yet impression for contrasted remarkably.\nForfeited you engrossed but gay sometimes explained. Another as studied it to evident. Merry sense given he be arise. Conduct at an replied removal an amongst. Remaining determine few her two cordially admitting old.\nVestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Pellentesque suscipit.\nTiled say decay spoil now walls meant house. My mr interest thoughts screened of outweigh removing. Evening society musical besides inhabit ye my. Lose hill well up will he over on. Increasing link sufficient everything men him admiration unpleasing .\nGreatest properly off ham exercise all. Unsatiable invitation its possession nor off. All difficulty estimating unreserved increasing the solicitude. Unpleasant astonished an diminution up partiality. Noisy an their of meant. Death means up civil do an offer wound of.\ndef print_hi(name) puts \u0026#34;Hi, #{name}\u0026#34; end print_hi(\u0026#39;Ryan\u0026#39;) #=\u0026gt; prints \u0026#39;Hi, Ryan\u0026#39; to STDOUT. ","tags":["App","Mobile"],"title":"Design in Mobile Application"},{"categories":["Design"],"date":"May 15, 2020","permalink":"https://mahigarg.github.io/blog/by-spite-what/","section":"blog","summary":"So striking at of to welcomed resolved. Northward by described up household therefore attention. Excellence decisively nay man yet impression for contrasted remarkably.\nForfeited you engrossed but gay sometimes explained. Another as studied it to evident. Merry sense given he be arise. Conduct at an replied removal an amongst. Remaining determine few her two cordially admitting old.\nFor me, the design — it is the quality of life. Good design has little to do with trends. Tired of listening to how he try to give the status of a frivolous fashion phenomenon. In my opinion, the designer should strive to do more than separate things.\nTiled say decay spoil now walls meant house. My mr interest thoughts screened of outweigh removing. Evening society musical besides inhabit ye my. Lose hill well up will he over on. Increasing link sufficient everything men him admiration unpleasing .\nGreatest properly off ham exercise all. Unsatiable invitation its possession nor off. All difficulty estimating unreserved increasing the solicitude. Unpleasant astonished an diminution up partiality. Noisy an their of meant. Death means up civil do an offer wound of.\ndef print_hi(name) puts \u0026#34;Hi, #{name}\u0026#34; end print_hi(\u0026#39;Ryan\u0026#39;) #=\u0026gt; prints \u0026#39;Hi, Ryan\u0026#39; to STDOUT. ","tags":["Hugo"],"title":"By spite about what to do"},{"categories":null,"date":"January 1, 0001","permalink":"https://mahigarg.github.io/portfolio/explore/","section":"portfolio","summary":"","tags":null,"title":"Explore"},{"categories":null,"date":"January 1, 0001","permalink":"https://mahigarg.github.io/portfolio/gooir/","section":"portfolio","summary":"","tags":null,"title":"Gooir"},{"categories":null,"date":"January 1, 0001","permalink":"https://mahigarg.github.io/portfolio/kana/","section":"portfolio","summary":"","tags":null,"title":"Kana"},{"categories":null,"date":"January 1, 0001","permalink":"https://mahigarg.github.io/portfolio/mozar/","section":"portfolio","summary":"","tags":null,"title":"Mozar"},{"categories":null,"date":"January 1, 0001","permalink":"https://mahigarg.github.io/portfolio/stay-fit/","section":"portfolio","summary":"","tags":null,"title":"Stay Fit"},{"categories":null,"date":"January 1, 0001","permalink":"https://mahigarg.github.io/portfolio/zorro/","section":"portfolio","summary":"","tags":null,"title":"Zorro"}]