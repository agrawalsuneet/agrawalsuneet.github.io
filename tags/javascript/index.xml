<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on Suneet Agrawal</title>
    <link>https://agrawalsuneet.github.io/tags/javascript/</link>
    <description>Recent content in JavaScript on Suneet Agrawal</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 Apr 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://agrawalsuneet.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Get and Set Methods with Date Objects in JavaScript</title>
      <link>https://agrawalsuneet.github.io/blogs/get-and-set-methods-with-date-objects-in-javascript/</link>
      <pubDate>Fri, 13 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://agrawalsuneet.github.io/blogs/get-and-set-methods-with-date-objects-in-javascript/</guid>
      <description>&lt;p&gt;Working with dates is a common task in web development, and JavaScript provides a built-in Date object to handle date and time-related operations. Two essential methods for manipulating Date objects are get and set methods. In this blog, we will explore how to use these methods to retrieve and modify various components of a Date object.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Date Comparison in JavaScript</title>
      <link>https://agrawalsuneet.github.io/blogs/date-comparison-in-javascript/</link>
      <pubDate>Wed, 11 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://agrawalsuneet.github.io/blogs/date-comparison-in-javascript/</guid>
      <description>&lt;p&gt;Working with dates is a common task in web development, and JavaScript provides a powerful set of tools for manipulating and comparing dates. Whether you&amp;rsquo;re building a scheduling application, calculating the age of a user, or implementing date-based logic, understanding how to compare dates in JavaScript is essential. In this guide, we&amp;rsquo;ll explore various techniques and best practices for comparing dates in JavaScript.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Map vs WeakMap in JavaScript</title>
      <link>https://agrawalsuneet.github.io/blogs/map-vs-weak-map-in-javascript/</link>
      <pubDate>Mon, 09 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://agrawalsuneet.github.io/blogs/map-vs-weak-map-in-javascript/</guid>
      <description>&lt;p&gt;JavaScript provides various data structures to manage collections of key-value pairs, and two commonly used ones are Map and WeakMap. Both are used to associate values with keys, but they have distinct characteristics and use cases. In this blog, we will explore the differences between Map and WeakMap with examples to help you understand when to use each one.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Set vs WeakSet in JavaScript</title>
      <link>https://agrawalsuneet.github.io/blogs/set-vs-weak-set-in-javascript/</link>
      <pubDate>Sat, 07 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://agrawalsuneet.github.io/blogs/set-vs-weak-set-in-javascript/</guid>
      <description>&lt;p&gt;JavaScript provides various data structures to manage collections of data, and two commonly used ones are Set and WeakSet. Both are used to store collections of values, but they have distinct characteristics and use cases. In this blog, we will explore the differences between Set and WeakSet with examples to help you understand when to use each one.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Let vs Var vs Const in JavaScript</title>
      <link>https://agrawalsuneet.github.io/blogs/let-vs-var-const-in-javascript/</link>
      <pubDate>Thu, 21 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://agrawalsuneet.github.io/blogs/let-vs-var-const-in-javascript/</guid>
      <description>&lt;p&gt;JavaScript is a versatile and widely used programming language that offers multiple ways to declare variables, including &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;var&lt;/code&gt;, and &lt;code&gt;const&lt;/code&gt;. Each of these declarations serves a specific purpose and has its own scope and behavior. In this blog post, we&amp;rsquo;ll dive into the differences between &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;var&lt;/code&gt;, and &lt;code&gt;const&lt;/code&gt; in JavaScript with examples to help you understand when and how to use them effectively.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nested Function in JavaScript</title>
      <link>https://agrawalsuneet.github.io/blogs/nested-function-in-javascript/</link>
      <pubDate>Fri, 18 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://agrawalsuneet.github.io/blogs/nested-function-in-javascript/</guid>
      <description>&lt;p&gt;JavaScript is a versatile and widely used programming language that empowers developers to create interactive and dynamic web applications. One of its powerful features is the ability to define functions within functions, known as nested functions. This concept can be a bit tricky to grasp at first, but once understood, it opens the door to more organized and modular code. In this blog, we&amp;rsquo;ll dive into nested functions in JavaScript, provide examples to illustrate their usage, and explore the benefits they bring to your codebase.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Date Object in JavaScript</title>
      <link>https://agrawalsuneet.github.io/blogs/date-object-in-javascript/</link>
      <pubDate>Thu, 17 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://agrawalsuneet.github.io/blogs/date-object-in-javascript/</guid>
      <description>&lt;p&gt;Dates and time are fundamental concepts in programming, essential for tasks ranging from displaying the current date on a webpage to performing complex date calculations. JavaScript offers a powerful Date object that enables developers to work with dates, times, and time zones seamlessly. In this comprehensive guide, we&amp;rsquo;ll explore the Date object in JavaScript, cover its methods and properties, and provide a wide range of examples showcasing various date-related operations and formatting options.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Map vs Object : JavaScript</title>
      <link>https://agrawalsuneet.github.io/blogs/map-vs-object-javascript/</link>
      <pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://agrawalsuneet.github.io/blogs/map-vs-object-javascript/</guid>
      <description>&lt;p&gt;In JavaScript, data structures play a vital role in organizing and manipulating data efficiently. Two commonly used data structures for storing key-value pairs are the Map and the Object. While they might seem similar at first glance, each has distinct features and use cases that make them suitable for different scenarios. In this blog post, we&amp;rsquo;ll delve into the Map and Object in JavaScript, providing examples that showcase their strengths and helping you make informed decisions when choosing the right data structure for your specific needs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>This Keyword in JavaScript</title>
      <link>https://agrawalsuneet.github.io/blogs/this-keyword-in-javascript/</link>
      <pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://agrawalsuneet.github.io/blogs/this-keyword-in-javascript/</guid>
      <description>&lt;p&gt;JavaScript is a versatile and dynamic programming language used extensively for web development. One of its key features is the this keyword, which plays a crucial role in determining the context of function execution. Understanding how this works is essential for writing clean and efficient JavaScript code. In this blog post, we&amp;rsquo;ll dive deep into the this keyword, exploring its behavior and providing detailed examples to clarify its usage.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Set in JavaScript</title>
      <link>https://agrawalsuneet.github.io/blogs/set-in-javascript/</link>
      <pubDate>Tue, 08 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://agrawalsuneet.github.io/blogs/set-in-javascript/</guid>
      <description>&lt;p&gt;When it comes to managing collections of unique values in JavaScript, the Set object is a hidden gem that can greatly simplify your code and enhance your data handling. In this blog post, we&amp;rsquo;re going to delve into the world of Sets, explore their features, and provide real-world examples of how you can leverage their power in your JavaScript projects.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Map in JavaScript</title>
      <link>https://agrawalsuneet.github.io/blogs/map-in-javascript/</link>
      <pubDate>Sun, 06 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://agrawalsuneet.github.io/blogs/map-in-javascript/</guid>
      <description>&lt;p&gt;In the world of JavaScript, data manipulation is a crucial skill for developers. While arrays and objects are common choices for storing data, the Map data type is a powerful alternative that offers unique advantages. In this blog post, we&amp;rsquo;ll embark on a journey to explore the Map data type, understand its features, and showcase practical examples of how it can be employed to enhance your JavaScript code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Map function in JavaScript</title>
      <link>https://agrawalsuneet.github.io/blogs/map-function-in-javascript/</link>
      <pubDate>Fri, 04 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://agrawalsuneet.github.io/blogs/map-function-in-javascript/</guid>
      <description>&lt;p&gt;When it comes to working with arrays in JavaScript, the &lt;code&gt;map()&lt;/code&gt; function is a versatile and powerful tool that should not be overlooked. This higher-order function allows you to transform each element of an array and create a new array with the transformed values. In this blog post, we&amp;rsquo;ll dive into the map() function and explore its capabilities with real-world examples.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bind Function in JavaScript</title>
      <link>https://agrawalsuneet.github.io/blogs/bind-function-in-javascript/</link>
      <pubDate>Mon, 03 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://agrawalsuneet.github.io/blogs/bind-function-in-javascript/</guid>
      <description>&lt;p&gt;JavaScript is a versatile programming language that empowers developers to create dynamic and interactive web applications. To harness its full potential, understanding its various features and functions is crucial. One such powerful function is the bind() function. In this blog, we&amp;rsquo;ll delve into the intricacies of the bind() function in JavaScript, its practical applications, and how it can be effectively utilized in your codebase.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Closures in JavaScript</title>
      <link>https://agrawalsuneet.github.io/blogs/closures-in-javascript/</link>
      <pubDate>Sat, 01 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://agrawalsuneet.github.io/blogs/closures-in-javascript/</guid>
      <description>&lt;p&gt;JavaScript, a language renowned for its versatility, offers a wealth of features that enable developers to create powerful and dynamic applications. Among these features, closures stand as a key concept that can greatly enhance code organization, data privacy, and functionality. In this blog, we&amp;rsquo;ll embark on a journey into the world of closures in JavaScript, unraveling their intricacies through illustrative examples and exploring their practical applications.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Function Expression : JavaScript</title>
      <link>https://agrawalsuneet.github.io/blogs/function-expression-javascript/</link>
      <pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://agrawalsuneet.github.io/blogs/function-expression-javascript/</guid>
      <description>&lt;p&gt;JavaScript is a dynamic and versatile programming language that allows developers to create complex and dynamic applications. One of the key features of JavaScript is its ability to use functions as first-class citizens. This means that functions can be assigned to variables, passed as arguments to other functions, and even returned as values from functions. In this article, we&amp;rsquo;ll take a closer look at function expressions in JavaScript and explore how they can be used in your code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>JavaScript ‘For’ Loop</title>
      <link>https://agrawalsuneet.github.io/blogs/javascript-for-loop/</link>
      <pubDate>Wed, 26 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://agrawalsuneet.github.io/blogs/javascript-for-loop/</guid>
      <description>&lt;p&gt;Loops are an essential part of any programming language, and JavaScript is no exception. One of the most common loops used in JavaScript is the for loop.  In this blog, we will focus on the for loop in JavaScript and how it can be used to iterate over an array or object.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Array Operations in JavaScript (Push, Pop, Shift and Unshift)</title>
      <link>https://agrawalsuneet.github.io/blogs/array-operations-in-javascript-push-pop-shift-unshift/</link>
      <pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://agrawalsuneet.github.io/blogs/array-operations-in-javascript-push-pop-shift-unshift/</guid>
      <description>&lt;p&gt;JavaScript is a powerful programming language that offers several ways to manipulate arrays, which are one of the most commonly used data structures in JavaScript. Four important array manipulation methods are &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;pop&lt;/code&gt;, &lt;code&gt;shift&lt;/code&gt;, and &lt;code&gt;unshift&lt;/code&gt;. These methods allow you to add and remove elements from the beginning or end of an array. In this blog, we will discuss these methods and their usage in JavaScript.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Equality (&#39;=&#39; vs &#39;==&#39; vs &#39;===&#39;) in JavaScript</title>
      <link>https://agrawalsuneet.github.io/blogs/equality-in-javascript/</link>
      <pubDate>Mon, 24 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://agrawalsuneet.github.io/blogs/equality-in-javascript/</guid>
      <description>&lt;p&gt;In JavaScript, there are three types of equality operators: &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt;, and &lt;code&gt;===&lt;/code&gt;. Each of these operators has a different purpose and can lead to different results when used. Understanding the differences between these operators is essential for writing efficient and reliable code in JavaScript.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
