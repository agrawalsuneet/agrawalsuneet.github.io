<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kotlin on Suneet Agrawal</title>
    <link>https://agrawalsuneet.github.io/tags/kotlin/</link>
    <description>Recent content in Kotlin on Suneet Agrawal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 18 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://agrawalsuneet.github.io/tags/kotlin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Plus(&#43;) and Minus(-) Operator : Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/plus-and-minus-operator-kotlin/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/plus-and-minus-operator-kotlin/</guid>
      <description>The collection is something which is used by almost everyone. It makes our life easy. List, Set and Map are the best examples of them.   To iterate, filter or modify the existing collection object, Kotlin provides us with a few in builds transform operators. Plus and Minus operator are few of them of them.  Lets try to understand the plus and minus operator in detail.    (adsbygoogle = window.</description>
    </item>
    
    <item>
      <title>Filter Operator : Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/filter-operator-kotlin/</link>
      <pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/filter-operator-kotlin/</guid>
      <description>The collection is something which is used by almost everyone. It makes our life easy. List, Set and Map are the best examples of them.   To iterate, filter or modify the existing collection object, Kotlin provides us with a few in builds transform operators. Filter operator is one of them.  Lets try to understand the filter operator in detail.    (adsbygoogle = window.adsbygoogle || []).</description>
    </item>
    
    <item>
      <title>Map Operator : Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/map-operator-kotlin/</link>
      <pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/map-operator-kotlin/</guid>
      <description>The collection is something which is used by almost everyone. It makes our life easy. List, Set and Map are the best examples of them.   To iterate, filter or modify the existing collection object, Kotlin provides us with a few in builds transform operators. Map operator is one of them.  Lets try to understand the map operator in detail.    (adsbygoogle = window.adsbygoogle || []).</description>
    </item>
    
    <item>
      <title>Math.round vs Math.floor vs Math.ceil : Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/math-round-vs-math-floor-vs-math-ceil-kotlin/</link>
      <pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/math-round-vs-math-floor-vs-math-ceil-kotlin/</guid>
      <description>Rounding up to the nearest Integer value functionality is something required a lot of times. Kotlin has a few inbuilt functions which can do the rounding up for us but they are a bit confusing. To decide when to use what, we need to understand which rounding function rounds up in which direction and which data types it can round up.  Let&#39;s understand them in detail before comparing.   Before reading this blog, keep in mind that -3 is bigger than -4 and -3.</description>
    </item>
    
    <item>
      <title>Kotlin Range Operator</title>
      <link>https://agrawalsuneet.github.io/blogs/kotlin-range-operator/</link>
      <pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/kotlin-range-operator/</guid>
      <description>Range Operator in Kotlin is a basic operator that is used to operate over a range. A range can be defined with a start value and an end value with and without inclusion.   The range operators can be used with for loops, if conditions or even in when operator. First, let to see a basic example of a range operator.    (adsbygoogle = window.adsbygoogle || []).</description>
    </item>
    
    <item>
      <title>Iterators in Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/iterators-in-kotlin/</link>
      <pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/iterators-in-kotlin/</guid>
      <description>Collections (Sets, Maps and Lists) are something we use daily. Traversing (Iteration) is the most common operation we perform over any collection.  Iterators are used to traverse over a collection object. It provides access to the elements of the collection object sequentially without exposing the underlying structure of the collection.    (adsbygoogle = window.adsbygoogle || []).push({});     How to get an iterator object?  An iterator reference object can be obtained using iterator() function which is declared in the Iterable interface for generic type T.</description>
    </item>
    
    <item>
      <title>Destructuring Declarations in Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/destructuring-declarations-in-kotlin/</link>
      <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/destructuring-declarations-in-kotlin/</guid>
      <description>Sometimes it&#39;s easy to destructure an object into multiple variables of different properties instead of calling it again and again using . operator on the property or instance itself. It is beneficial for a few reasons like,  We don&#39;t have to use the dot property on the object again and again. If the object is of a nullable type, we can do the null check only once and then we can destructure it to non-nullable properties.</description>
    </item>
    
    <item>
      <title>lateinit vs lazy Property in Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/lateinit-vs-lazy-property-in-kotlin/</link>
      <pubDate>Sun, 29 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/lateinit-vs-lazy-property-in-kotlin/</guid>
      <description>Since object creation is a heavy process as it initialises all the public and private properties defined in that class when the constructor is called, Kotlin has few ways to initialise properties later when required. We already discussed lateinit properties and lazy properties.   Let&#39;s try to understand some basic differences between then and when to use what. But before that let&#39;s quickly recap the lateinit and lazy properties    (adsbygoogle = window.</description>
    </item>
    
    <item>
      <title>lazy Property in Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/lazy-property-in-kotlin/</link>
      <pubDate>Wed, 04 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/lazy-property-in-kotlin/</guid>
      <description>Object creation is a heavy process. When we create a class object, all the public and private properties of that class are initialised inside the constructor. Every variable inside a class initialisation requires a certain amount of time to allocate the memory on the heap and hold its reference on the stack. The more variables, the more time it may take but since the time is in microseconds or even less, it&#39;s not observable.</description>
    </item>
    
    <item>
      <title>Why with function is not an Extension to Template class?</title>
      <link>https://agrawalsuneet.github.io/blogs/why-with-function-is-not-an-extension-to-template-class/</link>
      <pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/why-with-function-is-not-an-extension-to-template-class/</guid>
      <description>After reading my last blog about Kotlin with function, a lot of developers have asked me about, why with is not an extension to Template class like other scope functions?   Not only with, but run also has two implementations among which one is not an extension to Template class but a generic extension function.    (adsbygoogle = window.adsbygoogle || []).push({});    The question isÂ why?</description>
    </item>
    
    <item>
      <title>Kotlin run function</title>
      <link>https://agrawalsuneet.github.io/blogs/kotlin-run-function/</link>
      <pubDate>Sun, 09 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/kotlin-run-function/</guid>
      <description>Kotlin has made our life very easy by providing features like extension functions, nullability check and much more. One such kind of really helpful feature is Scope functions. Once you understand what scope functions are, you will not able to resist yourself from using them.   Scope functions are nothing but the functions which define to the scope of the calling object. We can apply operations on that object within that scope and return the object itself from that scope function or we can even return the result of operation or operations from the scope function.</description>
    </item>
    
    <item>
      <title>Kotlin with function</title>
      <link>https://agrawalsuneet.github.io/blogs/kotlin-with-function/</link>
      <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/kotlin-with-function/</guid>
      <description>Kotlin has made our life very easy by providing features like extension functions, nullability check and much more. One such kind of really helpful feature is Scope functions. Once you understand what scope functions are, you will not able to resist yourself from using them.   Scope functions are nothing but the functions which define to the scope of the calling object. We can apply operations on that object within that scope and return the object itself from that scope function or we can even return the result of operation or operations from the scope function.</description>
    </item>
    
    <item>
      <title>Kotlin also function</title>
      <link>https://agrawalsuneet.github.io/blogs/kotlin-also-function/</link>
      <pubDate>Thu, 29 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/kotlin-also-function/</guid>
      <description>In continuation to my previous post where I explained about Kotlin let function and Kotlin apply function, let&#39;s try to understand today about also function today.   Just to recap, Scope functions are nothing but the functions which define to the scope of the calling object. We can apply operations on that object within that scope and return the object itself from that scope function or we can even return the result of operation or operations from the scope function.</description>
    </item>
    
    <item>
      <title>Kotlin apply function</title>
      <link>https://agrawalsuneet.github.io/blogs/kotlin-apply-function/</link>
      <pubDate>Thu, 29 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/kotlin-apply-function/</guid>
      <description>In continuation to my previous post where I explained about Kotlin let function, let&#39;s try to understand today about apply function today.   Just to recap, Scope functions are nothing but the functions which define to the scope of the calling object. We can apply operations on that object within that scope and return the object itself from that scope function or we can even return the result of operation or operations from the scope function.</description>
    </item>
    
    <item>
      <title>Kotlin let function</title>
      <link>https://agrawalsuneet.github.io/blogs/kotlin-let-function/</link>
      <pubDate>Thu, 29 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/kotlin-let-function/</guid>
      <description>Kotlin has made our life very easy by providing features like extension functions, nullability check and much more. One such kind of really helpful feature is Scope functions. Once you understand what scope functions are, you will not able to resist yourself from using them.   Scope functions are nothing but the functions which define to the scope of the calling object. We can apply operations on that object within that scope and return the object itself from that scope function or we can even return the result of operation or operations from the scope function.</description>
    </item>
    
    <item>
      <title>Collections in Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/collections-in-kotlin/</link>
      <pubDate>Thu, 22 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/collections-in-kotlin/</guid>
      <description>Collections are a common concept for most programming languages. It is a way of storing similar data types in a single object and iterate over it. Similar to any other language, Kotlin also has Collection defined in kotlin.collections package.   Types of Collection in Kotlin  There are two types of collection in Kotlin   Immutable  The one which can&#39;t be modified once the object is created.</description>
    </item>
    
    <item>
      <title>any(), none() &amp; all() : Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/any-none-all-kotlin/</link>
      <pubDate>Tue, 20 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/any-none-all-kotlin/</guid>
      <description>Kotlin is a powerful language that reduces a lot of boilerplate code required to perform basic operations in comparison to Java. The classic examples for the same are any, non and all functions which were added to the Iterable interface and Map interface.   Let try to understand what do they do, why they are required and when to use them. But before we begin, I am assuming a basic knowledge of Map, Set and List.</description>
    </item>
    
    <item>
      <title>Kotlin : Single Expression Function</title>
      <link>https://agrawalsuneet.github.io/blogs/kotlin-single-expression-function/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/kotlin-single-expression-function/</guid>
      <description>Kotlin is a powerful language that reduced a lot of boilerplate code when compared to Java. The single expression function is the same in terms of reducing the boilerplate code.   The single expression function, as his name suggests, is the function that just has a single expression. We can remove the return type of that function, braces as well as return keyword from it.    (adsbygoogle = window.</description>
    </item>
    
    <item>
      <title>Reified : Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/reified-kotlin/</link>
      <pubDate>Sat, 06 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/reified-kotlin/</guid>
      <description>Before we learn about reified,  Generics in any language is the powerful features that allow us to define classes, methods and properties which are accessible using different data types while keeping a check of the compile-time type safety.    (adsbygoogle = window.adsbygoogle || []).push({});   The best example for a generics is Array or any List/Collection implementation.  package kotlin/** * Represents an array (specifically, a Java array when targeting the JVM platform).</description>
    </item>
    
    <item>
      <title>Kotlin Enum Classes</title>
      <link>https://agrawalsuneet.github.io/blogs/kotlin-enum-classes/</link>
      <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/kotlin-enum-classes/</guid>
      <description>Enums are special classes which limit the possible values of an object for that class. The possible values defined for that class are final or unchangeable.   The easiest way to define an enum is  enum class Direction { EAST, WEST, NORTH, SOUTH}  Here each enum constant is an object.   For using these values  var direction : Direction = Direction.EAST    (adsbygoogle = window.</description>
    </item>
    
    <item>
      <title>Android : Share message directly to whatsapp contact</title>
      <link>https://agrawalsuneet.github.io/blogs/android-share-message-directly-to-whatsapp-contact/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/android-share-message-directly-to-whatsapp-contact/</guid>
      <description>Whatsapp is something which doesn&#39;t require any introduction. It&#39;s a conversation app used by millions of users across the world. These million users make it unique for developers also to give special attention when it comes to sharing some message through Whatsapp.   During recent times, I was asked multiple times in the comments section or even emails, if there is any possible way where we can send the text message directly to a WhatsApp contact?</description>
    </item>
    
    <item>
      <title>Backing Field in Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/backing-field-in-kotlin/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/backing-field-in-kotlin/</guid>
      <description>What is Backing Field ?  Backing field is an autogenerated field for any property which can only be used inside the accessors(getter or setter) and will be present only if it uses the default implementation of at least one of the accessors, or if a custom accessor references it through the field identifier. This backing field is used to avoid the recursive call of an accessor which ultimately prevents the StackOverflowError.</description>
    </item>
    
    <item>
      <title>Companion object in Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/companion-object-in-kotlin/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/companion-object-in-kotlin/</guid>
      <description>Unlike Java or C#, Kotlin doesnât have static members or member functions. Kotlin recommends to simply use package-level functions instead.  If you need to write a function that can be called without having a class instance but needs access to the internals of a class, you can write it as a member of a companion object declaration inside that class. By declaring a companion object inside our class, youâll be able to call its members with the same syntax as calling static methods in Java/C#, using only the class name as a qualifier.</description>
    </item>
    
    <item>
      <title>Difference between Any, Unit and NothingÂ :Â Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/difference-between-any-unit-and-nothing-kotlin/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/difference-between-any-unit-and-nothing-kotlin/</guid>
      <description>We all know about three classes Any, Unit and Nothing in Kotlin which have their own functionality and use cases but we usually confuse between the differences among them and when to use what.   Let try to understand what are these, when to use what and how these are different from one another.    (adsbygoogle = window.adsbygoogle || []).push({});    Any  Any is an open class and by default the superclass for all the classes, whether we define it explicitly or not.</description>
    </item>
    
    <item>
      <title>Equality in Kotlin (â==â, â===â and âequalsâ)</title>
      <link>https://agrawalsuneet.github.io/blogs/equality-in-kotlin/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/equality-in-kotlin/</guid>
      <description>We often need to compare the data of two variables or objects or the references of two objects in Kotlin. This brings in another question, which equality check should we use in which case.  Letâs figure out what are the types of checks available in Kotlin.    (adsbygoogle = window.adsbygoogle || []).push({});    Structural Equality (â==â)  == operator is used to compare the data of two variables.</description>
    </item>
    
    <item>
      <title>Extensions as Members : Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/extensions-as-members-kotlin/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/extensions-as-members-kotlin/</guid>
      <description>In continuation to my last Medium post Extensions in Kotlin where I explained what are Extensions and how do we use it, this medium post will cover the implementation of Extensions as members of some other class.   An extension can be defined as members of some other class also.  The benefit of defining an extension as a member of the other class is, we can access all the functions and properties of both the classes inside that extension method.</description>
    </item>
    
    <item>
      <title>Extensions in Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/extensions-in-kotlin/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/extensions-in-kotlin/</guid>
      <description>Have you ever felt some useful functionality missing in an existing class?  The class could be in the libraries provided by language also.   âYesâ   What exactly you do to add that functionality in the class?  âExtend the class and add the method and then use my own extended classâ  If so, Kotlin extensions can definitely make your life easier.    (adsbygoogle = window.</description>
    </item>
    
    <item>
      <title>Higher-order functions in Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/higher-order-functions-in-kotlin/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/higher-order-functions-in-kotlin/</guid>
      <description>What is a higher-order function?  In Kotlin, a function can be passed as a parameter or can be returned from a function, the function which does the same is known as a higher-order function. In other words, a higher-order function is a function that takes functions as parameters or returns a function.    (adsbygoogle = window.adsbygoogle || []).push({});    Letâs take an example   fun &amp;lt;T&amp;gt; ArrayList&amp;lt;T&amp;gt;.</description>
    </item>
    
    <item>
      <title>How can I migrate my Android code from Java to Kotlin?</title>
      <link>https://agrawalsuneet.github.io/slides/how-can-i-migrate-my-android-code-from-java-to-kotlin/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/slides/how-can-i-migrate-my-android-code-from-java-to-kotlin/</guid>
      <description>In continuation of the previews session for Google Accelerator programÂ on the topic Java or Kotlin. what do you use? today we are going to look at how can you migrate the codebase from java to Kotlin and what are the common mistake made by developers while doing the same.   Developers know the benefit of Kotlin over Java for Android app developmentÂ but they hesitate to try it or even sometimes doesn&#39;t know how to start using it in their existing code base.</description>
    </item>
    
    <item>
      <title>How extension functions resolved?</title>
      <link>https://agrawalsuneet.github.io/blogs/how-extension-functions-resolved/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/how-extension-functions-resolved/</guid>
      <description>&#34;how are extension functions resolved?&#34;  This question is being asked by almost everyone both in and outside the interviews.Â  Even I have asked this question to many candidates during the interview.Â  The shorted or the only answer I get is &#34;Statically&#34;.   What does statically means?  Or how does extension functions are actually resolved?    (adsbygoogle = window.adsbygoogle || []).push({});   Let&#39;s understand this with an example.</description>
    </item>
    
    <item>
      <title>Infix Notation : Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/infix-notation-kotlin/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/infix-notation-kotlin/</guid>
      <description>Ever imagined calling a public function of a class without dot and parentheses of the parameter in Kotlin. Kotlin provides infix notation with which we can call a function with the class object without using a dot and parentheses across the parameter. Using infix function provides more readability to a function similar to other operators like in, is, as in Kotlin.    (adsbygoogle = window.adsbygoogle || []).push({});   To make a function infix notation enabled, add infix keyword before the function.</description>
    </item>
    
    <item>
      <title>Inheritance vs Extension functions</title>
      <link>https://agrawalsuneet.github.io/blogs/inheritance-vs-extension-functions/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/inheritance-vs-extension-functions/</guid>
      <description>We all know about inheritance which is there in the OOPs concept where one can extend a class and add functionality to it. In the new programming languages, there is something called as extension functions which can add a functionality to an existing class without extending it.  Sometimes we are confused about what to use when. To get help here, one needs to understand first what are these two and what are the benefits and limitations over the other.</description>
    </item>
    
    <item>
      <title>Inline function : Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/inline-function-kotlin/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/inline-function-kotlin/</guid>
      <description>What is inlining?  Inlining is basically requesting the compiler to copy the (inlined) code at the calling place.   Why it is required?  When a program is executed and a function is called, CPU stores the memory address of the instruction following the function call, copies the arguments of the function into a stack and finally transfers control to the specified function. The CPU then executes the function code, stores the function return value in a predefined memory location/register and returns control to the calling function.</description>
    </item>
    
    <item>
      <title>Java or Kotlin, What do you use?</title>
      <link>https://agrawalsuneet.github.io/slides/java-or-kotlin-what-do-you-use/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/slides/java-or-kotlin-what-do-you-use/</guid>
      <description>Kotlin is something which was introduced as an official language for Android development in Google I/O 2017. Since then it has grown and evolved a lot. It has multiple benefits and on top of everything, it&#39;s really easy to use.   Its been three years, still devs or some companies hesitate to use it.    What is Kotlin? How can it benefit your startup? Why devs resist themselves movingÂ from Java to Kotlin language?</description>
    </item>
    
    <item>
      <title>Kotlin Extension Property</title>
      <link>https://agrawalsuneet.github.io/blogs/kotlin-extension-property/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/kotlin-extension-property/</guid>
      <description>Extension functions are really-really helpful while writing code in Kotlin. You don&#39;t have to extend the class but you can add the functionality to even a final (non-open) class which will be resolved statically but how about extension properties.   A very interesting question asked to me during an interview or even a general situation where we need to add a property (variable) to an existing class without extending it.</description>
    </item>
    
    <item>
      <title>Kotlin âForâ loop</title>
      <link>https://agrawalsuneet.github.io/blogs/kotlin-for-loop/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/kotlin-for-loop/</guid>
      <description>While converting all my java code to kotlin, one of the strange syntax change I observed was the for loop in both the languages. Later I realized in Kotlin, there are few concepts which are completely different from java or any other another language for loops.   Wait! They are not this tough. In fact, they are very easy, interesting and helpful.    (adsbygoogle = window.adsbygoogle || []).</description>
    </item>
    
    <item>
      <title>Label Reference in Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/label-reference-in-kotlin/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/label-reference-in-kotlin/</guid>
      <description>Any expression in Kotlin may be marked with a label. This can be used to as an identifier. A label can be defined in Kotlin using label name followed by @ sign in front of any expression.   Let me give you an example  loopi@ for( i in 1..5){ print(i) }   But what is the use? Where I am going to use this label and why would I use it?</description>
    </item>
    
    <item>
      <title>lateinit Property in Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/lateinit-property-in-kotlin/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/lateinit-property-in-kotlin/</guid>
      <description>There can be two ways to declare and initialize a var property  var variable : CustomClass = CustomClass()  orvar variable : CustomClass? = null    (adsbygoogle = window.adsbygoogle || []).push({});   The first property is initialized while declaration itself and doesnât require a null check (?.) while using it.  But in the second type, the property is initialized with a null value and will require a null check (?</description>
    </item>
    
    <item>
      <title>Object Expression in Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/object-expression-in-kotlin/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/object-expression-in-kotlin/</guid>
      <description>Sometimes we need to create an object of some class with slight modification, without explicitly declaring a new subclass for it. Java handles this case with anonymous inner classes. Kotlin uses object expression to achieve the same functionality.   We can even create an object expression for an interface or abstract class by just implementing their abstract methods. This functionality is called an anonymous interface implementation or anonymous abstract class implementation.</description>
    </item>
    
    <item>
      <title>Pair and Triple in Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/pair-and-triple-in-kotlin/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/pair-and-triple-in-kotlin/</guid>
      <description>It is a very common use case where we want to return two values from a method, can be either of same data type or can be of different data types.   What usually we do there is either create some local variables if the method is of the same class and set those variables from the method and consume them in the place where needed or we create a class with just two variables and return that class object from the method.</description>
    </item>
    
    <item>
      <title>partition() : Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/partition-kotlin/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/partition-kotlin/</guid>
      <description>The collection is something which is used by almost everyone. It makes our life easy. List, Set and Map are the best examples of them. Even the programming language in which you are writing code provides you with a few basic operations that can be performed on those collections, But sometimes you need even more operations.   Recently in one of my use case, the basic operations were not enough for me.</description>
    </item>
    
    <item>
      <title>Qualified âthisâ in Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/qualified-this-in-kotlin/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/qualified-this-in-kotlin/</guid>
      <description>The only thing we learnt about this pointer in other languages is âthis is an implicit pointer which points to the calling objectâ. As clear from the definition, it points to the object which calls the respective function or property.    (adsbygoogle = window.adsbygoogle || []).push({});   Now the real problem arises when we have an inner class or anonymous interface implementation. We lose the reference of the outer class.</description>
    </item>
    
    <item>
      <title>Safe calls(?.) vs Null checks(!!) in Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/safe-calls-vs-null-checks-in-kotlin/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/safe-calls-vs-null-checks-in-kotlin/</guid>
      <description>In Kotlin, the type system distinguishes between references that can hold null (nullable references) and those that can not (non-null references).  For example, a normal property canât hold a null value and will show a compile error.  var variable : CustomClass = CustomClass()variable = null //compilation error    (adsbygoogle = window.adsbygoogle || []).push({});   Instead, we can add a ? after the data type of that property which declares that variable as a nullable property  var nullableVariable : CustomClass?</description>
    </item>
    
    <item>
      <title>The Nothing Type : Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/the-nothing-type-kotlin/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/the-nothing-type-kotlin/</guid>
      <description>What if I say there is a class called Nothing in Koltin.   And What does it do? Nothing.   The time I read about the class Nothing for the first time, it sounds interesting to me. This class has no instance and it is used to represent a value which never exists. This class is also used to represent a return type from a method that will never return.</description>
    </item>
    
    <item>
      <title>Type Aliases in Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/type-aliases-in-kotlin/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/type-aliases-in-kotlin/</guid>
      <description>Life is painful when you have two or more classes with the same name but different package name and you have to use them both in the same place.   Only one import can be added and the other one needs to be referenced by its complete package name dot class name. Every time you use the second class name, you need to use it by the entire package name of that class.</description>
    </item>
    
    <item>
      <title>TypeCheck (âisâ) and Cast (âasâ) in Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/typecheck-is-and-cast-as-in-kotlin/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/typecheck-is-and-cast-as-in-kotlin/</guid>
      <description>Type check is a way of checking the type(DataType) or Class of a particular instance or variable while runtime to separate the flow for different objects. In few languages, itâs also denoted as Run Time Type Identification (RTTI).    (adsbygoogle = window.adsbygoogle || []).push({});   Letâs consider an example where we have an Interface called Shape having an abstract method as calculateArea.  interface Shape { fun calculateArea(): Float}  We have three different classes implementing the same interface and implementing their own area calculating method according to their shapes.</description>
    </item>
    
    <item>
      <title>Variable number of arguments (vararg) : Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/variable-number-of-arguments-vararg-kotlin/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/variable-number-of-arguments-vararg-kotlin/</guid>
      <description>Sometimes we need a function where we can pass n number of parameters, and the value of n can be decided at runtime. Kotlin provides us to achieve the same by defining a parameter of a function as vararg. We can pass n number of parameters to a vararg variable of the defined datatype or even of a generic type.    (adsbygoogle = window.adsbygoogle || []).push({});   Let me give you an example.</description>
    </item>
    
    <item>
      <title>Why let function is an Extension to Template class?</title>
      <link>https://agrawalsuneet.github.io/blogs/why-let-function-is-an-extension-to-template-class/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/why-let-function-is-an-extension-to-template-class/</guid>
      <description>After reading my last blog about Kotlin let function, a lot of developers have asked me about, why let is an extension to Template class but not to Any class?   Not only let, but other helper functions like apply, also, takeIf and takeUnless are also extension functions to the Template class.    (adsbygoogle = window.adsbygoogle || []).push({});    The question isÂ why?   Any is the base class for all the classes, similar to java.</description>
    </item>
    
    <item>
      <title>âinâ operator in Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/in-operator-in-kotlin/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/in-operator-in-kotlin/</guid>
      <description>âinâ operator in Koltin is used to check the existence of particular variable or property in a Range or Collection whereas a â!inâ operator is just a not of âinâ operator and returns true if the condition is false. It can also be used to iterate over a range or collection.    (adsbygoogle = window.adsbygoogle || []).push({});    1. âinâ operator in âifâ condition  val count = 5;if (count in 1.</description>
    </item>
    
    <item>
      <title>âtakeIfâ and âtakeUnlessâ : Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/takeif-and-takeunless-kotlin/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/takeif-and-takeunless-kotlin/</guid>
      <description>Ever thought of chaining an if condition?  What if we can chain the if condition also and moves or executes the next code in the chain only if the condition is true?   Kotlin has something very interesting to achieve the same.  We can use takeIf and takeUnless to achieve the same. As clear from the name itself, takeIf will proceed in the chain only if the condition inside is true whereas takeUnless is the counter of takeIf and will proceed only if the provided condition is false.</description>
    </item>
    
    <item>
      <title>âwhenâ operator in Kotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/when-operator-in-kotlin/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/when-operator-in-kotlin/</guid>
      <description>when operator is a replacement of switch operator in other languages.  var intNumber = 10 when (intNumber) { 1 - print(âvalue is 1â) 2 - print(âvalue is 2â) else - { print(âvalue of intNumber is neither 1 nor 2â) } }    (adsbygoogle = window.adsbygoogle || []).push({});   when operator matches its argument with all the branches until it matches with anyone, else it executes the else block.</description>
    </item>
    
    <item>
      <title>Property, Getter and Setterâ:âKotlin</title>
      <link>https://agrawalsuneet.github.io/blogs/property-getter-and-setter-kotlin/</link>
      <pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/property-getter-and-setter-kotlin/</guid>
      <description>I started developing Android apps in Java where encapsulation of object-oriented programming was achieved through declaring variables as private fields with their getter and setter as public methods. The moment I converted my Java code to Kotlin, it replaced each variable along with its getter and setter with just a single line of code. Although I was amazed at how can a single line of code replace the complete variable with the same functionality, but later on understanding it, I started liking writing the code in Kotlin.</description>
    </item>
    
  </channel>
</rss>
