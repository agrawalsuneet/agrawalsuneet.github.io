<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming-Basics on Suneet Agrawal</title>
    <link>https://agrawalsuneet.github.io/tags/programming-basics/</link>
    <description>Recent content in Programming-Basics on Suneet Agrawal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Dec 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://agrawalsuneet.github.io/tags/programming-basics/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Variable vs Object vs Reference</title>
      <link>https://agrawalsuneet.github.io/blogs/variable-vs-object-vs-reference/</link>
      <pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/variable-vs-object-vs-reference/</guid>
      <description>Variables, Objects and References, we frequently listen to these terms while development but usually gets confused between them.   Let&#39;s try to understand a very basic definition along with an example for all three. The concept is similar in any object-oriented programming language but for reference, I&#39;ll be using Java examples. Feel free to comment below if you need examples in any specific language.    (adsbygoogle = window.</description>
    </item>
    
    <item>
      <title>Low Level Design : Tic-Tac-Toe</title>
      <link>https://agrawalsuneet.github.io/slides/low-level-design-tic-tac-toe/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/slides/low-level-design-tic-tac-toe/</guid>
      <description>System designing is the process of designing system elements such as architectures, modules, components, different interfaces of those components. Its the process of defining the lowest level entities in a software. It is the backbone of any software.   System design is of two types  Low level design High level design   There is no fine line or a separator difference between the two that upto this part of software is low level and above this is high level but mostly,  Low level defines reusable entities and relationship between them as well as the object creation and dependencies.</description>
    </item>
    
    <item>
      <title>Object-Oriented Programming (OOP) Concepts</title>
      <link>https://agrawalsuneet.github.io/slides/object-oriented-programming-oop-concepts/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/slides/object-oriented-programming-oop-concepts/</guid>
      <description>Object-oriented programming (OOP) concepts are something which are fundamentals of any Object-oriented programming language. These concepts give you the power to structure your code in such a way that it&#39;s well optimized, reusable, efficient, future proof and much more.   The basic concepts of Object-oriented programming are,  Abstraction Encapsulation Dependency Association Composition Aggregation  Inheritance Extensibility Run-Time Polymorphism (RTP) Substitutability Overriding   Packaging   Please note that these concepts are not language specific but applies to all object oriented programming languages.</description>
    </item>
    
  </channel>
</rss>