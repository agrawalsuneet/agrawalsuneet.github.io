<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift on Suneet Agrawal</title>
    <link>https://agrawalsuneet.github.io/tags/swift/</link>
    <description>Recent content in Swift on Suneet Agrawal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 18 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://agrawalsuneet.github.io/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Safe calls(?.) vs Nil checks(!.) in Swift</title>
      <link>https://agrawalsuneet.github.io/blogs/safe-calls-vs-nil-checks-in-swift/</link>
      <pubDate>Sat, 18 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/safe-calls-vs-nil-checks-in-swift/</guid>
      <description>In Swift, the type system distinguishes between references that can hold nil (nil references) and those that can not (non-nil references).  For example, a normal property canâ€™t hold a nil value and will show a compile error.  var variable : CustomClass = CustomClass()variable = nil //compilation error //&#39;nil&#39; cannot be assigned to type &#39;CustomClass&#39;    (adsbygoogle = window.adsbygoogle || []).push({});   Instead, we can add a ?</description>
    </item>
    
    <item>
      <title>Default vs Optional vs Explicit Non-nil Variables: Swift</title>
      <link>https://agrawalsuneet.github.io/blogs/default-vs-optional-vs-explicit-non-nil-variables-swift/</link>
      <pubDate>Fri, 17 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/default-vs-optional-vs-explicit-non-nil-variables-swift/</guid>
      <description>In Swift, we can differentiate the variables into three different categories based on their possible values.  The variable can be of default type, optional type or an explicit non-nil type.   All three types of variables can be clubbed with both let and var. Or they can also be used with any data type.  Before looking at their differences, Let&#39;s try to understand them one by one in detail.</description>
    </item>
    
    <item>
      <title>Double vs Float : Swift</title>
      <link>https://agrawalsuneet.github.io/blogs/double-vs-float-swift/</link>
      <pubDate>Sun, 10 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/double-vs-float-swift/</guid>
      <description>Swift has two data types (Double and Float) to hold the decimal values. Both of them hold the same decimal type values but have some differences.   The basic difference is around the size of memory they both use based on which their precision varies.    (adsbygoogle = window.adsbygoogle || []).push({});   Let&#39;s try to understand the differences between both with example.   Number of Digits   The Double type is used to store values in up to 17 places.</description>
    </item>
    
    <item>
      <title>Custom Object in UserDefaults : Swift</title>
      <link>https://agrawalsuneet.github.io/blogs/custom-object-in-userdefaults-swift/</link>
      <pubDate>Thu, 24 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/custom-object-in-userdefaults-swift/</guid>
      <description>In continuation to my previous blog UserDefaults in Swift, where we understand the basic functionality of UserDefaults, we&#39;ll try to understand today how can we store custom objects in UserDefaults.  UserDefaults provides us with direct functions for storing primitive data types like Int, Double, Bool, and String. But for custom data types, there is no direct way to store them in UserDefaults. But there is a workaround with which we can store the custom object to UserDefaults.</description>
    </item>
    
    <item>
      <title>Custom Object in UserDefaults : Swift (Github Gist)</title>
      <link>https://agrawalsuneet.github.io/gists/custom-object-in-userdefaults-swift/</link>
      <pubDate>Thu, 24 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/gists/custom-object-in-userdefaults-swift/</guid>
      <description> This particular script will help you to store and retrieve custom class or struct objects in UserDefaults.   For further explaination on how this works, please read the article Custom Object in UserDefaults : Swift.      (adsbygoogle = window.adsbygoogle || []).push({});   &amp;lt;&amp;lt; All Gists   Native Android in Unity &amp;gt;&amp;gt;    </description>
    </item>
    
    <item>
      <title>UserDefaults in Swift</title>
      <link>https://agrawalsuneet.github.io/blogs/userdefaults-in-swift/</link>
      <pubDate>Thu, 24 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/userdefaults-in-swift/</guid>
      <description>A small set of data is required to be stored and accessed very frequently and need to be persisted across sessions or app launches. One way of keeping them is using a local database like core data in an iOS app. But core data is helpful in the case of tables and queries. There is another way to store a small set of data, UserDefaults.  Let&#39;s try to understand what are UserDefaults first.</description>
    </item>
    
    <item>
      <title>UISwitch Value Change Listener : Swift</title>
      <link>https://agrawalsuneet.github.io/blogs/uiswitch-value-change-listener-swift/</link>
      <pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/uiswitch-value-change-listener-swift/</guid>
      <description>Adding an value change event to a UISwitch is something that is required most of the time. For views like UISwitch, we can connect an IBAction with the event type as value changed and get a callback for the value changed.   If you are not using xib or storyboard but creating the layout programmatically or by using swiftUI, you can the editing event using a target action that takes three parameters,  target of Any type which is nullable action of Selector type controlEvents of UIControl.</description>
    </item>
    
    <item>
      <title>UISwitch Value Change Listener : Swift (Github Gist)</title>
      <link>https://agrawalsuneet.github.io/gists/uiswitch-value-change-listener-swift/</link>
      <pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/gists/uiswitch-value-change-listener-swift/</guid>
      <description> This particular script will help you to implement a Value Change listener to all UISwitch and its subclasses in a clean way.   For further explaination on how this works, please read the article UISwitch Value Change Listener : Swift.      (adsbygoogle = window.adsbygoogle || []).push({});   &amp;lt;&amp;lt; All Gists   Custom Object in UserDefaults : Swift &amp;gt;&amp;gt;    </description>
    </item>
    
    <item>
      <title>UIDatePicker Date Change Listener : Swift</title>
      <link>https://agrawalsuneet.github.io/blogs/uidatepicker-date-change-listener-swift/</link>
      <pubDate>Wed, 09 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/uidatepicker-date-change-listener-swift/</guid>
      <description>Adding an editing event to a UIDatePicker is something that is required most of the time. For views like UIDatePicker, we can connect an IBAction with the event type as value changed and get a callback for the value changed.   If you are not using xib or storyboard but creating the layout programmatically or by using swiftUI, you can the editing event using a target action that takes three parameters,  target of Any type which is nullable action of Selector type controlEvents of UIControl.</description>
    </item>
    
    <item>
      <title>UIDatePicker Date Change Listener : Swift (Github Gist)</title>
      <link>https://agrawalsuneet.github.io/gists/uidatepicker-date-change-listener-swift/</link>
      <pubDate>Wed, 09 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/gists/uidatepicker-date-change-listener-swift/</guid>
      <description> This particular script will help you to implement a Date Change listener to all UIDatePicker and its subclasses in a clean way.   For further explaination on how this works, please read the article UIDatePicker Date Change Listener : Swift.      (adsbygoogle = window.adsbygoogle || []).push({});   &amp;lt;&amp;lt; All Gists   UISwitch Value Change Listener : Swift &amp;gt;&amp;gt;    </description>
    </item>
    
    <item>
      <title>UITextField Text Listener : Swift</title>
      <link>https://agrawalsuneet.github.io/blogs/uitextfield-text-listener-swift/</link>
      <pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/uitextfield-text-listener-swift/</guid>
      <description>Adding an editing event to a UITextField is something that is required most of the time. For views like UITextField, we can connect an IBAction with the event type as editing did end or value changed and get a callback for editing finished or value changed.   If you are not using xib or storyboard but creating the layout programmatically or by using swiftUI, you can the editing event using a target action that takes three parameters,  target of Any type which is nullable action of Selector type controlEvents of UIControl.</description>
    </item>
    
    <item>
      <title>UITextField Text Listener : Swift (Github Gist)</title>
      <link>https://agrawalsuneet.github.io/gists/uitextfield-text-listener-swift/</link>
      <pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/gists/uitextfield-text-listener-swift/</guid>
      <description> This particular script will help you to implement a Text listener to all UITextField and its subclasses in a clean way.   For further explaination on how this works, please read the article UITextField TextListener : Swift.      (adsbygoogle = window.adsbygoogle || []).push({});   &amp;lt;&amp;lt; All Gists   Native Android in Unity &amp;gt;&amp;gt;    </description>
    </item>
    
    <item>
      <title>Switch Statement in Swift</title>
      <link>https://agrawalsuneet.github.io/blogs/switch-statement-in-swift/</link>
      <pubDate>Sun, 27 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/switch-statement-in-swift/</guid>
      <description>The switch statement in Swift is used to execute a particular block of code based on multiple conditions. A switch statement is useful for more than one condition. For one or two conditions, if-else is a better option but for conditions more than that, a switch statement is a better option.   We will try to understand the flow of switch statement in detail but let&#39;s try to understand its basic syntax first.</description>
    </item>
    
    <item>
      <title>Swift Range Operators</title>
      <link>https://agrawalsuneet.github.io/blogs/swift-range-operators/</link>
      <pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/swift-range-operators/</guid>
      <description>Range Operator in Swift is a basic operator that is used to operate over a range. There are multiple types of range operators where we can include or exclude the upper range. Or we can start the range with some value or can end before some max value.   The range operators can be used with for loops, if conditions, switch conditions or even in array iteration. First, let to see a basic example of a range operator.</description>
    </item>
    
    <item>
      <title>For-in vs For-each in Swift</title>
      <link>https://agrawalsuneet.github.io/blogs/for-in-vs-for-each-in-swift/</link>
      <pubDate>Sun, 26 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/for-in-vs-for-each-in-swift/</guid>
      <description>For-in and for-each are different variants of for loops in swift which are used to iterate over a range, set or dictionary. Both provide the same functionality but has a few limitations or differences when it comes to conditional access.   To understand their differences, let&#39;s try to understand their examples in details first.    (adsbygoogle = window.adsbygoogle || []).push({});    For-in loop  For-in loop is used to iterate over a range, set or dictionary using both the indexes as well an element based iteration.</description>
    </item>
    
    <item>
      <title>Swift â€˜Forâ€™ loop</title>
      <link>https://agrawalsuneet.github.io/blogs/swift-for-loop/</link>
      <pubDate>Sat, 25 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/swift-for-loop/</guid>
      <description>For loops are used by every developer regularly. There is for-in as well as a for-each loop in Swift which has a bit different syntaxes. Both of them are used to iterate over a range, array, set or dictionary but have a bit different syntaxes.   While comparing with other languages, I realized in Swift, there are few concepts which are completely different from java or any other another language for loops.</description>
    </item>
    
    <item>
      <title>Computed Property in Swift</title>
      <link>https://agrawalsuneet.github.io/blogs/computed-property-in-swift/</link>
      <pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/computed-property-in-swift/</guid>
      <description>Object creation is a heavy process. When we create a class object, all the public and private properties of that class are initialised inside the constructor. Every variable inside a class initialisation requires a certain amount of time to allocate the memory on the heap and hold its reference on the stack. The more variables, the more time it may take but since the time is in microseconds or even less, it&#39;s not observable.</description>
    </item>
    
    <item>
      <title>lazy Property in Swift</title>
      <link>https://agrawalsuneet.github.io/blogs/lazy-property-in-swift/</link>
      <pubDate>Sun, 05 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/lazy-property-in-swift/</guid>
      <description>Object creation is a heavy process. When we create a class object, all the public and private properties of that class are initialised inside the constructor. Every variable inside a class initialisation requires a certain amount of time to allocate the memory on the heap and hold its reference on the stack. The more variables, the more time it may take but since the time is in microseconds or even less, it&#39;s not observable.</description>
    </item>
    
    <item>
      <title>Tuple in Swift</title>
      <link>https://agrawalsuneet.github.io/blogs/tuple-in-swift/</link>
      <pubDate>Fri, 21 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/tuple-in-swift/</guid>
      <description>It is a very common use case where we want to return two values from a method, can be either of same data type or can be of different data types.   What usually we do there is either create some local variables if the method is of the same class and set those variables from the method and consume them in the place where needed or we create a struct with just two variables and return that struct object from the method.</description>
    </item>
    
    <item>
      <title>if vs if let vs guard let in Swift</title>
      <link>https://agrawalsuneet.github.io/blogs/if-vs-if-let-vs-guard-let-in-swift/</link>
      <pubDate>Fri, 16 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/if-vs-if-let-vs-guard-let-in-swift/</guid>
      <description>if let and guard let are two conditional operators or condition checker which make our life super easy. Other languages have only if as condition checker but swift provides if let as well as guard let also which are operationally same but a bit different in functionality.   To understand their differences, let&#39;s try to understand what they are in details first.    (adsbygoogle = window.adsbygoogle || []).</description>
    </item>
    
    <item>
      <title>UIView ClickListener : Swift</title>
      <link>https://agrawalsuneet.github.io/blogs/uiview-clicklistener-swift/</link>
      <pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/uiview-clicklistener-swift/</guid>
      <description>Adding a click event to a UIView is something that is required most of the time. For views like UIButton, we can connect an IBAction with the event type and detect the click events but sometimes we need it for Lable or even other views.   If you try to add an IBAction to your view, you won&#39;t get Action as an option while connecting it with ViewController.    (adsbygoogle = window.</description>
    </item>
    
    <item>
      <title>UIView ClickListener : Swift (Github Gist)</title>
      <link>https://agrawalsuneet.github.io/gists/uiview-clicklistener-swift/</link>
      <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/gists/uiview-clicklistener-swift/</guid>
      <description> This particular script will help you to implement a Click listener to all UIView and its subclasses in a clean way.   For further explaination on how this works, please read the article UIView ClickListener : Swift.      (adsbygoogle = window.adsbygoogle || []).push({});   &amp;lt;&amp;lt; All Gists   UITextField Text Listener : Swift &amp;gt;&amp;gt;    </description>
    </item>
    
    <item>
      <title>â€˜mutatingâ€™ in Swift</title>
      <link>https://agrawalsuneet.github.io/blogs/mutating-in-swift/</link>
      <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/mutating-in-swift/</guid>
      <description>As we all know, Classes are reference type whereas Structures and Enumerations are of a value type in swift. What does that mean is that a class object shares a single instance of the object and passes the same reference if passed to any function or new object whereas the value type is the one which creates a copy of it and passes only the value.    (adsbygoogle = window.</description>
    </item>
    
    <item>
      <title>â€˜inoutâ€™ in Swift</title>
      <link>https://agrawalsuneet.github.io/blogs/inout-in-swift/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/inout-in-swift/</guid>
      <description>Recently, while working with swift I came up with a use case where I need to modify the variable passed as an argument to a function. Eventually, all the variables passed to a function are of an immutable type which cannot be changed which is similar to a let variable. If itâ€™s a class object, you cannot create a new object but you can manipulate the properties of that class object or you can call any function with that object.</description>
    </item>
    
  </channel>
</rss>
