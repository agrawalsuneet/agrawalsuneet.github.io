<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift on Suneet Agrawal</title>
    <link>https://agrawalsuneet.github.io/tags/swift/</link>
    <description>Recent content in Swift on Suneet Agrawal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://agrawalsuneet.github.io/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>For-in vs For-each in Swift</title>
      <link>https://agrawalsuneet.github.io/blogs/for-in-vs-for-each-in-swift/</link>
      <pubDate>Sun, 26 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/for-in-vs-for-each-in-swift/</guid>
      <description>For-in and for-each are different variants of for loops in swift which are used to iterate over a range, set or dictionary. Both provide the same functionality but has a few limitations or differences when it comes to conditional access.   To understand their differences, let&#39;s try to understand their examples in details first.    (adsbygoogle = window.adsbygoogle || []).push({});    For-in loop  For-in loop is used to iterate over a range, set or dictionary using both the indexes as well an element based iteration.</description>
    </item>
    
    <item>
      <title>Swift ‘For’ loop</title>
      <link>https://agrawalsuneet.github.io/blogs/swift-for-loop/</link>
      <pubDate>Sat, 25 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/swift-for-loop/</guid>
      <description>For loops are used by every developer regularly. There is for-in as well as a for-each loop in Swift which has a bit different syntaxes. Both of them are used to iterate over a range, array, set or dictionary but have a bit different syntaxes.   While comparing with other languages, I realized in Swift, there are few concepts which are completely different from java or any other another language for loops.</description>
    </item>
    
    <item>
      <title>Computed Property in Swift</title>
      <link>https://agrawalsuneet.github.io/blogs/computed-property-in-swift/</link>
      <pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/computed-property-in-swift/</guid>
      <description>Object creation is a heavy process. When we create a class object, all the public and private properties of that class are initialised inside the constructor. Every variable inside a class initialisation requires a certain amount of time to allocate the memory on the heap and hold its reference on the stack. The more variables, the more time it may take but since the time is in microseconds or even less, it&#39;s not observable.</description>
    </item>
    
    <item>
      <title>lazy Property in Swift</title>
      <link>https://agrawalsuneet.github.io/blogs/lazy-property-in-swift/</link>
      <pubDate>Sun, 05 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/lazy-property-in-swift/</guid>
      <description>Object creation is a heavy process. When we create a class object, all the public and private properties of that class are initialised inside the constructor. Every variable inside a class initialisation requires a certain amount of time to allocate the memory on the heap and hold its reference on the stack. The more variables, the more time it may take but since the time is in microseconds or even less, it&#39;s not observable.</description>
    </item>
    
    <item>
      <title>Tuple in Swift</title>
      <link>https://agrawalsuneet.github.io/blogs/tuple-in-swift/</link>
      <pubDate>Fri, 21 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/tuple-in-swift/</guid>
      <description>It is a very common use case where we want to return two values from a method, can be either of same data type or can be of different data types.   What usually we do there is either create some local variables if the method is of the same class and set those variables from the method and consume them in the place where needed or we create a struct with just two variables and return that struct object from the method.</description>
    </item>
    
    <item>
      <title>if vs if let vs guard let in Swift</title>
      <link>https://agrawalsuneet.github.io/blogs/if-vs-if-let-vs-guard-let-in-swift/</link>
      <pubDate>Fri, 16 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/if-vs-if-let-vs-guard-let-in-swift/</guid>
      <description>if let and guard let are two conditional operators or condition checker which make our life super easy. Other languages have only if as condition checker but swift provides if let as well as guard let also which are operationally same but a bit different in functionality.   To understand their differences, let&#39;s try to understand what they are in details first.    (adsbygoogle = window.adsbygoogle || []).</description>
    </item>
    
    <item>
      <title>UIView ClickListener : Swift</title>
      <link>https://agrawalsuneet.github.io/blogs/uiview-clicklistener-swift/</link>
      <pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/uiview-clicklistener-swift/</guid>
      <description>Adding a click event to a UIView is something which is required most of the times. For views like UIButton, we can simply connect an IBAction with the event type and detect the click events but sometimes we need it for Lable or even other views.   If you try to add an IBAction to your view, you won&#39;t get Action as an option while connecting it with ViewController.</description>
    </item>
    
    <item>
      <title>UIView ClickListener : Swift</title>
      <link>https://agrawalsuneet.github.io/gists/uiview-clicklistener-swift/</link>
      <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/gists/uiview-clicklistener-swift/</guid>
      <description> This particular script will help you to implement a Click listener to all UIView and its subclasses in a clean way.   For further explaination on how this works, please read the article UIView ClickListener : Swift.      (adsbygoogle = window.adsbygoogle || []).push({});   &amp;lt;&amp;lt; All Gists   Native Android in Unity &amp;gt;&amp;gt;    </description>
    </item>
    
    <item>
      <title>‘mutating’ in Swift</title>
      <link>https://agrawalsuneet.github.io/blogs/mutating-in-swift/</link>
      <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/mutating-in-swift/</guid>
      <description>As we all know, Classes are reference type whereas Structures and Enumerations are of a value type in swift. What does that mean is that a class object shares a single instance of the object and passes the same reference if passed to any function or new object whereas the value type is the one which creates a copy of it and passes only the value.    (adsbygoogle = window.</description>
    </item>
    
    <item>
      <title>‘inout’ in Swift</title>
      <link>https://agrawalsuneet.github.io/blogs/inout-in-swift/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://agrawalsuneet.github.io/blogs/inout-in-swift/</guid>
      <description>Recently, while working with swift I came up with a use case where I need to modify the variable passed as an argument to a function. Eventually, all the variables passed to a function are of an immutable type which cannot be changed which is similar to a let variable. If it’s a class object, you cannot create a new object but you can manipulate the properties of that class object or you can call any function with that object.</description>
    </item>
    
  </channel>
</rss>
